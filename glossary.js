// glossaryファイル JavaScript
`use strict`
const glossary = [
{target:`算術演算子（operator）`, content:`データに対する演算内容を表す（+、-、*、/、%、**）`},
{target:`文字列型`, content:`’Hello world!'などのデータ型`},
{target:`数値型`, content:`1、5、1.001などのデータ型`},
{target:`ブーリアン型`, content:`true、falseのデータ型`},
{target:`高水準言語`, content:`プログラミング言語のJavaScript、Python、C++など`},
{target:`アセンブリ言語`, content:`ハードウェアに直接対話する中級言語で、機械語との対応があるプログラミング言語`},
{target:`低水準言語`, content:`ハードウェアに近い表現を使用し、直接の制御が可能なプログラミング言語`},
{target:`文字列結合`, content:`2つの文字列を結合すること（'butter' + 'fly'）`},
{target:`コンソール`, content:`テキストベースのユーザーインターフェースで、プログラムの出力や入力を行う画面`},
{target:`キーワード`, content:`プログラムの構造や動作を指定するための予約された言葉や識別子`},
{target:`変数`, content:`データを格納するためのメモリ上の場所で、値が変更可能なプログラムの要素`},
{target:`関数シグネチャ`, content:`関数の動作を説明するのに使用。関数名、引数のデータ型と数、返り値のデータ型を持つ`},
{target:`比較演算子（comparison operator）`, content:`プログラムで値を比較するために使用される演算子で、等しい、大なり、小なりなどの関係を表現する`},
{target:`式（epression）`, content:`値を導き出すもの`},
{target:`型（type）`, content:`データの異なるカテゴリ（例：数値型やブーリアン型）`},
{target:`論理式（logical expression）`, content:`論理演算子を使用して組み立てられた式で、真（true）または偽（False）の結果を返す`},
{target:`HTML（Hyper Text Markup Language）`, content:`Webページの内容と構成を記述するための言語`},
{target:`タグ`, content:`HTMLドキュメントでの各要素の性格をマーキングするもの`},
{target:`ブロック`, content:`プログラム内の複数のステートメントやコード行をまとめ、1つのまとまりとして扱うためのコードブロック。通常、中括弧（{}）で囲まれ、その中に複数のコード行が含まれる`},
{target:`インライン`, content:`コードや要素が本来の文脈から外れずに、その場で直接配置されること。それぞれ行や要素の中に直接挿入される`},
{target:`if文（条件分岐、conditionals）`, content:`プログラム内である条件が満たされた場合や特定の状況に応じて、異なるコードブロックや処理が実行されるプログラムの構造。<br>**(){}else **(){} else {}`},
{target:`条件 (三項) 演算子`, content:`3 つのオペランドをとる演算子。条件に続いて疑問符 (?)、そして条件が真値であった場合に実行する式（返り値）、コロン (:) が続き、条件が偽値であった場合に実行する式（返り値）が最後に来る。<br>condition ? exprIfTrue : exprIfFalse;<br>condition ? rvTrue : rvFalse; `},
{target:`テスト駆動型開発（Test Driven Development, TDD）`, content:`ソフトウェアの開発プロセス。実際のプロダクションコード（production code）を書く前に、機能の要件と期待値を書く。1.テストを書く、2.テストを実行、3.必要最小限のコードを書く、4.テストを再実行、5.1～4繰り返し、6.リファクタリング。テストではエッジケースも考慮`},
{target:`コーディング規約 スタイルガイドライン`, content:`コードの品質を高めるための基準。参考サイト：beautifier.io、AirBnbスタイルガイド`},
{target:`比較（comparisons）`, content:`プログラムで異なる値や変数の大小や等しさなどを調べ、その結果に基づいて制御フローを変更する演算`},
{target:`関数呼び出し演算子`, content:`()`},
{target:`等しい`, content:`==`},
{target:`等しくない`, content:`!=`},
{target:`厳密に等しい`, content:`===`},
{target:`厳密に等しくない`, content:`!==`},
{target:`よりも大きい`, content:`>`},
{target:`以上`, content:`>=`},
{target:`未満`, content:`<`},
{target:`以下`, content:`<=`},
{target:`AND 論理積 かつ`, content:`&&`},
{target:`OR 論理和 または`, content:`||`},
{target:`NOT`, content:`!`},
{target:`配列 array`, content:`項目のまわりには各括弧[]をつける。各項目はコンマ','で分ける。複数の要素を保存。複数の値のリスト。インデックスは0から`},
{target:`要素`, content:`プログラムやデータ構造において、配列やリストなどの中に格納されている各単位やデータの単位。通常、要素はインデックスやキーによって識別`},
{target:`インデックス`, content:`配列やリストなどのデータ構造において、各要素に割り当てられた一意の番号や位置を指す値。通常、0から始まる整数値で表され、指定された位置の要素にアクセスするために使用`},
{target:`ミュータブル`, content:`変化できるデータ`},
{target:`イミュータブル`, content:`変化できないデータ`},
{target:`オブジェクト`, content:`どのような種類の値でも格納できる。中括弧{}で周りを囲む。値を参照するときはキーを使う。キーは文字列である。キーと値はコロン':'で区切る。それぞれのキーと値のペアの間はコンマ','で区切る`},
{target:`key valueペア`, content:`キーと値のペア`},
{target:`ドット記法`, content:`オブジェクトの値のアクセスの仕方。ドット'.'の後にキーを書く`},
{target:`ブラケット記法`, content:`配列やオブジェクトの値のアクセスの仕方。角括弧[]の中に配列はインデックス、オブジェクトはキーを書く`},
{target:`スコープ`, content:`ひとつの区切られた範囲であり、この中で宣言された変数は、この範囲でしかアクセスできない。外から内の変数にアクセスはできない`},
{target:`関数スコープ`, content:`関数が呼び出されると作成される。関数内で宣言された変数はこの範囲でのみアクセスでき、関数の処理が終わると消去される。仮引数もこの範囲でしか使えない。`},
{target:`ブロックスコープ`, content:`波括弧{}で囲んで作る。この範囲で宣言された変数は、その中でのみ使用可能、処理が終わると消去される。if文やforループなど`},
{target:`ローカルスコープ`, content:`関数スコープやブロックスコープのこと`},
{target:`グローバルスコープ`, content:`最上位の範囲。ローカルスコープの外側。ローカルスコープで宣言された変数はアクセスできない。この範囲で宣言された変数は、コード内のどこからでもアクセスできる`},
{target:`ローカル変数`, content:`特定のスコープ内だけの変数`},
{target:`ネスト`, content:`ある構造の内部に同じ構造が含まれる状態や構造のこと。入れ子とも呼ぶ`},
{target:`for-inループ`, content:`オブジェクトの各要素にアクセス。オブジェクトの各要素のキーが代入される変数の宣言。波括弧{}の中でループ処理をする。値は通常ブラケット記法でアクセスする`},
{target:`for-ofループ`, content:`配列の各要素にアクセス。配列の各要素が代入される変数の宣言。波括弧{}の中でループ処理をする`},
{target:`プリミティブ型`, content:`数値、文字列、ブーリアン、undefined、null。値渡し`},
{target:`オブジェクト型`, content:`オブジェクト、配列、関数。参照渡し`},
{target:`参照渡し`, content:`オブジェクト型のデータはメモリ中の別のところに作られ、値にはその参照（reference）、アドレスが入る。オブジェクト型データは扱い方で中身を変えてしまう可能性がある`},
{target:`値渡し`, content:`プリミティブ型データで値そのものを渡す。ある変数から別の変数へ値をわたすと、それぞれの変数は別個の値を持つことになる。`},
{target:`whileループ`, content:`if文と同じような働きをし、丸括弧()の中の条件がtrueである限り、波括弧{}の中のループの処理が繰り返される`},
{target:`forループ`, content:`if文と同じような働きをし、丸括弧()のなかで変数（通常i, j, k）の初期化、条件、条件がいずれfalseになる処理を書く（それぞれはセミコロン';'で区切る）。条件がtrueである限り、波括弧{}の中のループの処理が繰り返される。丸括弧`},
{target:`関数（functions）`, content:`値を返す。副作用を作り出す。値を返し、副作用も作り出す`},
{target:`関数の宣言`, content:`プログラムで関数を定義するための宣言手法。function ***(x){return}`},
{target:`関数の呼び出し演算子`, content:`()`},
{target:`引数`, content:`関数に渡すデータや情報。関数の呼び出し演算子()の中に記入`},
{target:`実引数（argument）`, content:`関数呼び出し時に渡される値やデータ`},
{target:`仮引数（parameter）`, content:`関数定義で受け取るための変数やパラメータ`},
{target:`返り値（戻り値）`, content:`関数が処理を終えた後に返す値。return文を利用`},
{target:`関数の中身`, content:`関数内で実行されるコードや処理のまとまり`},
{target:`return文`, content:`関数から戻り値を返すための文。関数の実行を終了し、呼び出し元に戻る`},
{target:`値としての関数`, content:`関数は値でもあるので、他の関数に引数として渡すことが可能。引数として渡される関数はしばしば、コールバック関数と呼ばれる。const *** = function(x){return}`},
{target:`副作用`, content:`本来の作用（返り値を返す）以外の動き。スコープ外のなんらかの状態を変えること`},
{target:`コールバック関数`, content:`他の関数に引数として渡される関数`},
{target:`クロージャ`, content:`関数が周囲のスコープにある変数を使って作成されると、その変数は関数と組み合され、関数は周囲のスコープを作っていた外側の関数が完了した後でも、その変数を利用できる。活用例：データプライバシー、同じような関数を容易にたくさん作る`},
{target:`データプライバシー`, content:`グローバルスコープからアクセスできないように全体をスコープに入れて作る。そうするとローカル変数はグローバルスコープからアクセスできなくなる`},
{target:`メソッド`, content:`オブジェクトでのプロパティの値が関数のもの（オブジェクトは関数も格納可）`},
{target:`プロパティ`, content:`オブジェクトのキーと値のペアのこと`},
{target:`Array.prototype`, content:`JavaScript の配列オブジェクト (Array) のプロトタイプを指す。すべての配列インスタンスが共通して使用できるメソッドやプロパティが定義`},
{target:`String.prototype`, content:`JavaScript の文字列オブジェクト (String) のプロトタイプを指す。文字列インスタンスが共通して使用できるメソッドやプロパティが含まれる`},
{target:`JavaScript`, content:`ページのインタラクティブ性を担う`},
{target:`JavaScriptライブラリ`, content:`他の人が書いたコード。index.htmlにインポートすることで、コードを書く際に使える`},
{target:`Lodash（ローダッシュ）`, content:`オープンソースライブラリ。'_.'で呼び出し`},
{target:`React`, content:`ユーザインターフェース構築のためのライブラリ`},
{target:`高階関数`, content:`関数を引数として受ける関数。関数を返り値として返す関数`},
{target:`無名関数`, content:`名前を持たない関数。通常、関数式として変数に代入されたり、高階関数の引数として渡されたりする`},
{target:`API（Application Programing Interface）`, content:`ユーザーが色々なデータを利用できるようになる仕組み`},
{target:`アロー関数`, content:`通常の関数式を簡潔に記述するための構文。(引数) => 返り値。(引数) => {return 返り値}。(引数1, 引数2) => 返り値。() => 返り値 など`},
{target:`スプレット構文`, content:`配列やオブジェクト、文字列を展開する演算子。引数で利用すると実引数を配列で受け取る。<br>const arr = [1, 2, 3]; [...arr, 4, 5]→[1, 2, 3, 4, 5]<br>const func(…arg){}`},
{target:`DOTYPE宣言`, content:`使用したいHTMLのバージョンをブラウザに伝えるコード`},
{target:`html要素`, content:`Webページのルート要素。<head>と<body>が入る`},
{target:`head要素`, content:`Webページを表示するのにブラウザが必要とするデータ（metadata）が入る`},
{target:`body要素`, content:`画面上に表示させたいすべてのデータが入る`},
{target:`p`, content:`段落`},
{target:`h1 h6`, content:`見出し`},
{target:`div`, content:`関連性のある要素を1つにまとめるための汎用の入れもの`},
{target:`ul`, content:`番号無の箇条書き`},
{target:`ol`, content:`番号付きのリスト`},
{target:`li`, content:`リスト中の項目`},
{target:`em`, content:`強調したいテキスト`},
{target:`!DOCTYPE`, content:`ドキュメントタイプを意味する。htmlの1行目に必要`},
{target:`開始タグ`, content:`<html>`},
{target:`終了タグ`, content:`</html>`},
{target:`lang`, content:`HTMLファイルのドキュメント中のテキストの言語を宣言`},
{target:`charset`, content:`使用する文字エンコーディング`},
{target:`content`, content:`Webページのスケール/ズームを指定`},
{target:`title`, content:`Webページのタイトル`},
{target:`ブロック要素`, content:`画面上で要素は常に改行して始まり、使える幅いっぱいに広がる`},
{target:`インライン要素`, content:`その中身が必要とする幅しかとらない。要素は前の要素と同じ行の中で続く`},
{target:`strong`, content:`テキストを強調するために使用されるタグ`},
{target:`span`, content:`特定の目的を持たない汎用のインライン要素`},
{target:`空要素`, content:`それだけで1つの要素を成し、コンテンツを持たない`},
{target:`コンテンツ`, content:`開始タグと終了タグに囲まれる中身`},
{target:`img`, content:`画像を挿入するための空要素`},
{target:`br`, content:`改行するためのインライン要素`},
{target:`id`, content:`HTML要素に一意である識別子を与えるための属性`},
{target:`class`, content:`HTML要素に複数のクラスを指定するための属性`},
{target:`セレクタ`, content:`スタイルを適用する対象を指定し、プロパティと値で見た目を定義。CSSではケバブケースを使用。基本的な種類としては、要素型、id、クラスなどがある`},
{target:`要素型セレクタ`, content:`HTMLページ内のそのタイプの要素（タグ）すべてを指定`},
{target:`idセレクタ`, content:`HTMLページ内で指定されたidをもつ要素を指定。CSSファイル側で頭に'#'をつける`},
{target:`クラスセレクタ`, content:`HTMLページ内で指定されたクラス名を持つ全ての要素を指定。CSSファイル側で頭に'.'をつける`},
{target:`ボックスモデル`, content:`Webページで各要素は四角い箱として表示。箱にはコンテンツ、パディング、ボーダー、マージンの4つのエリアがある。`},
{target:`CSSレイアウトモード`, content:`ボックス（HTML要素）の位置やサイズを指定`},
{target:`CSSプロパティ`, content:`HTML文書内の要素にスタイルやレイアウトを適用するために使用`},
{target:`コンテンツ`, content:`Webページのテキストや画像など`},
{target:`パディング`, content:`Webページのコンテンツと箱の橋のギャップ`},
{target:`ボーダー`, content:`Webページの箱の四周の境界線。スタイル、幅、色の設定が可能`},
{target:`マージン`, content:`Webページで何も表示されない。周りの要素を外に追いやり入れない`},
{target:`Flowレイアウト`, content:`デフォルトで特に指定しない。HTMLファイルの中の順にしたがってブロック要素が上から下へ、インライン要素が右に流れる`},
{target:`Flexboxレイアウト`, content:`効率よく要素を配置できるレイアウトモード。配置を指定したい要素を含む親要素にflexboxを使うことを設定。そのあとさまざまなプロパティを使って配置を設定。displayで設定`},
{target:`DOM ドキュメント オブジェクト モデル`, content:`HTMLオブジェクトのツリーのこと。documentオブジェクトを介してJavaScriptでアクセスし変更を加えられる`},
{target:`ツリー構造`, content:`HTMLドキュメントの各要素は、階層構造や親子関係、兄弟関係を持つ`},
{target:`親要素`, content:`HTMLドキュメントの上位層の要素`},
{target:`子要素`, content:`HTMLドキュメントの下位層の要素`},
{target:`兄弟要素`, content:`HTMLドキュメントで同じ層にある要素`},
{target:`ノード`, content:`ツリー構造やネットワークなどで、接続や階層構造の要素を指す`},
{target:`documentオブジェクト`, content:`DOMツリーのルートを指す。HTMLファイル全体に相当する`},
{target:`window`, content:`DOM文書を収めるウィンドウを表す`},
{target:`CSS（Cascading Style Sheets）`, content:`HTML要素にどんなスタイルをつけたいかを記述する言語。DOM要素では、すべてのDOM要素のstyleプロパティの中にある`},
{target:`CSSプロパティ`, content:`DOM要素のスタイルプロパティは単なるオブジェクト。更新するには、element.style.*** = ''とする`},
{target:`イベント`, content:`ユーザーのインプットなど、ソフトウェアが認識する何らかのアクション`},
{target:`イベントリスナー`, content:`イベントが発生したら行われる動きを記述した関数を仕組む。イベントが発生したらその関数を呼び出し、関数が実行される。addEventlistener関数`},
{target:`イベントオブジェクト`, content:`イベントリスナーに仕込んだ関数に渡す引数`},
{target:`operand（オペランド）`, content:`式や演算子において操作される値またはオブジェクト。二項演算子の場合、それに適用される数値や変数など`},
{target:`condition（条件）`, content:`制御構造や決定構造において評価され、真偽値を返す式。通常、条件文（if文やwhile文など）で使用される`},
{target:`param（パラメータ）`, content:`関数やメソッドに渡される引数のこと。関数が実行される際に、関数内で変数として扱われる`},
{target:`statement（ステートメント）`, content:`JavaScriptでの実行可能なコードの単位。文は通常、変数の宣言、条件分岐、ループなどの構造を指す`},
{target:`callbackFn（コールバック関数）`, content:`他の関数に引数として渡され、後で呼び出される関数。主に非同期処理やイベント駆動のプログラミングで使用される`},
{target:`thisArg（thisの引数）`, content:`関数が呼び出されたときに、thisが参照するオブジェクトを指定する引数。主にコールバック関数内でのthisの値を制御するために使用される`},
{target:`tryStatement（try文）`, content:`エラーが発生する可能性のあるコードを試し、エラーが発生した場合に処理を行うための文。catch文やfinally文と一緒に使用される`},
{target:`exceptionVar（例外変数）`, content:`try文内で発生したエラーの情報を保持するための変数。通常、catch文で指定され、エラーオブジェクトが代入される`},
{target:`catchStatement（catch文）`, content:`try文で発生したエラーを捕捉し、適切な処理を行うための文`},
{target:`finallyStatement（finally文）`, content:`try文の後に続き、エラーの有無にかかわらず必ず実行される文。クリーンアップ処理に使用されることがある`},
{target:`prop（プロパティ）`, content:`オブジェクト内の変数や関数などのメンバー。オブジェクトの特定の特性や挙動を表現する`},
{target:`object（オブジェクト）`, content:`JavaScriptにおけるデータ型の一つで、プロパティとメソッドを持つ複合データ構造`},
{target:`constructor（コンストラクタ）`, content:`クラスやオブジェクトのインスタンスを生成するための特別なメソッド。通常、newキーワードとともに使用される`},
{target:`argument（arg, 引数）`, content:`関数やメソッドに渡される値。パラメータとして関数内で使用される`},
{target:`rv（戻り値）`, content:`関数が実行された結果として返す値。通常、return文で指定される`},
{target:`selecter`, content:`CSSセレクターを指定する文字列`},
{target:`listener`, content:`指定されたイベント発生時に実行される関数`},
{target:`arg（引数）`, content:`引数の略称。関数やメソッドに渡される値として利用`},
{target:`再帰関数`, content:`関数が自身の定義内で自己参照的に呼び出されること。問題を小さな部分に分割し、解を組み立てるのに有用`},
{target:`再帰の深さ`, content:`再帰関数が自身を呼び出す深さ。深すぎる再帰はスタックオーバーフローを引き起こす可能性がある`},
{target:`スタック`, content:`プログラムが関数の呼び出しや変数の保持などの情報を一時的に保存するデータ構造。再帰関数が呼ばれるとスタックに新しいフレームが積まれる`},
{target:`クラス`, content:`オブジェクト指向プログラミングにおいて、同じ性質や振る舞いを共有するオブジェクトの設計図。定義された属性（プロパティ）や振る舞い（メソッド）がインスタンスに反映される`},
{target:`オブジェクト`, content:`クラスの実体化であり、クラスの設計図に基づいて作られた具体的なデータ構造。クラスのプロパティやメソッドを持ち、これによりデータと振る舞いをカプセル化。実際にメモリ上に存在し、実行時に変数に割り当てることができる`},
{target:`インスタンス`, content:`クラスを基にして作られた具体的なオブジェクト。クラスから複数生成でき、それぞれの独自のデータを持つ。オブジェクトの一種で、あるクラスの特定の実体を持つ`},
{target:`インスタンス化`, content:`クラスをもとにオブジェクトを生成するプロセス`},
{target:`コンストラクター`, content:`オブジェクト指向プログラミングにおいて、クラスから新しいオブジェクトを生成する際に呼び出される特別なメソッド。クラス内で定義され、そのクラスのインスタンスを初期化するための特別なメソッド。インスタンスを生成するときに呼び出され、インスタンスの初期状態を設定`},
{target:`静的メソッド・クラスメソッド`, content:`インスタンスではなくクラスに関連づけられたメソッド。インスタンスの状態にアクセスせず、通常はクラス全体に関連する処理や操作を行うために使用`},
{target:`静的プロパティ・クラスプロパティ`, content:`インスタンスではなくクラスに関連づけられたプロパティ`},
{target:`動的メソッド`, content:`インスタンスに対して呼び出されるメソッド。インスタンスの状態にアクセスでき、通常はインスタンスのプロパティや他のメソッドを操作するために使用。クラス内で定義され、クラスから生成された各インスタンスに属す`},
{target:`オブジェクト指向`, content:`プログラミングのパラダイムの一つで、プログラムをオブジェクトと呼ばれる個別のエンティティの集合に基づいて構築する考え方。オブジェクトはデータ（プロパティ）とそのデータを操作するための手続き（メソッド）を組み合わせたもの`},
{target:`this`, content:`現在のオブジェクトを指すキーワード`},
{target:`イテレータ―`, content:`要素を一つずつ順番に処理するオブジェクト`},
{target:`トピックス インポスター症候群`, content:`うまくやっているという客観的な証拠があるのに、自分は能力不足だと思い込む心理状態`},
{target:`プロダクトマネージャー（PM）`, content:`ビジネス、市場、ユーザーの価値を理解して最も適切な製品の方向性を定義。｢実装すべき機能｣に優先順位をつける。フラットなチームでリーン／アジャイルな開発チームを推進`},
{target:`プロダクトデザイナー（PD）`, content:`ユーザーを正しく理解するために、ユーザーテスト、インタビュー、アナリティクスを繰り返し計画・実行。製品やサービスを通じて得られる体験(UX)と、UXを実現する接点(UI)を生み出す`},
{target:`アジャイル開発エンジニア`, content:`技術を正しく理解し、リーン/アジャイルなプログラミングを行なう。エレガントで高品質なソフトウェア・ソリューションを提供。業界や組織で包括的に適用されるソフトウェアエンジニアリングへのアプローチを実践、指導する`},
{target:`業務専門家`, content:`機械学習などデータ解析でのプロジェクト全般のアイデア出し、入力データ項目の決定など`},
{target:`データエンジニア`, content:`機械学習などデータ解析でのデータの入手・加工、学習データの準備`},
{target:`データサイエンティスト`, content:`機械学習などデータ解析でのモデルの作成、モデルの最適化`},
]
